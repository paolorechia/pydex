service: pydex-api
frameworkVersion: "3"

package:
  patterns:
    - "!.serverless"
    - "!node_modules"
    - "!codex"
    - "!.gitignore"
    - "!package.json"
    - "!package-lock.json"
    - "!.requirements.zip"
    - "!.codex_api_key"
    - "!playground.py"
    - "!sample_api_key"
    - "handler.py"
    - "lib"

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage}
  region: eu-central-1
  memorySize: 256
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:Query"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.userTableName}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.userTableName}/index/*"
  environment:
    # Tables
    USER_TABLE_NAME: ${self:custom.userTableName}
    STAGE: ${self:provider.stage}

functions:
  pydex:
    handler: handler.pydex
    events:
      - http:
          path: /docstring
          method: POST
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 6

  authorizer:
    handler: handler.authorizer
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 6

  addUser:
    handler: handler.add_user
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 6

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-api-gateway-throttling

custom:
  userTableName: ${self:service}-users-table-${self:provider.stage}
  apiGatewayThrottling:
    maxRequestsPerSecond: 2
    maxConcurrentRequests: 5
  domainName:
    dev: ${self:provider.stage}.codex.api.openimagegenius.com
    prod: codex.api.openimagegenius.com
  customDomain:
    domainName: ${self:custom.domainName.${self:provider.stage}}
    basePath: pydex
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: EDGE
    securityPolicy: tls_1_2
    apiType: rest
  pythonRequirements:
    zip: true
    layer: true
    usePipenv: false


resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: api_token
            AttributeType: S
        KeySchema:
          - AttributeName: api_token
            KeyType: HASH
